// Mocks generated by Mockito 5.4.4 from annotations
// in weather_mobile_app/test/widget_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i7;

import 'package:geolocator/geolocator.dart' as _i6;
import 'package:hydrated_bloc/hydrated_bloc.dart' as _i9;
import 'package:mockito/mockito.dart' as _i1;
import 'package:mockito/src/dummies.dart' as _i8;
import 'package:weather_mobile_app/core/location/current_location.dart' as _i3;
import 'package:weather_mobile_app/core/permission/app_permission.dart' as _i4;
import 'package:weather_mobile_app/features/weather/domain/usecases/get_current_weather.dart'
    as _i2;
import 'package:weather_mobile_app/features/weather/presentation/bloc/weather_bloc.dart'
    as _i5;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeGetCurrentWeather_0 extends _i1.SmartFake
    implements _i2.GetCurrentWeather {
  _FakeGetCurrentWeather_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeLocationService_1 extends _i1.SmartFake
    implements _i3.LocationService {
  _FakeLocationService_1(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakePermissionService_2 extends _i1.SmartFake
    implements _i4.PermissionService {
  _FakePermissionService_2(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeWeatherState_3 extends _i1.SmartFake implements _i5.WeatherState {
  _FakeWeatherState_3(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakePosition_4 extends _i1.SmartFake implements _i6.Position {
  _FakePosition_4(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [WeatherBloc].
///
/// See the documentation for Mockito's code generation for more information.
class MockWeatherBloc extends _i1.Mock implements _i5.WeatherBloc {
  @override
  _i2.GetCurrentWeather get client => (super.noSuchMethod(
        Invocation.getter(#client),
        returnValue: _FakeGetCurrentWeather_0(
          this,
          Invocation.getter(#client),
        ),
        returnValueForMissingStub: _FakeGetCurrentWeather_0(
          this,
          Invocation.getter(#client),
        ),
      ) as _i2.GetCurrentWeather);

  @override
  _i3.LocationService get locationService => (super.noSuchMethod(
        Invocation.getter(#locationService),
        returnValue: _FakeLocationService_1(
          this,
          Invocation.getter(#locationService),
        ),
        returnValueForMissingStub: _FakeLocationService_1(
          this,
          Invocation.getter(#locationService),
        ),
      ) as _i3.LocationService);

  @override
  _i4.PermissionService get permissionService => (super.noSuchMethod(
        Invocation.getter(#permissionService),
        returnValue: _FakePermissionService_2(
          this,
          Invocation.getter(#permissionService),
        ),
        returnValueForMissingStub: _FakePermissionService_2(
          this,
          Invocation.getter(#permissionService),
        ),
      ) as _i4.PermissionService);

  @override
  _i5.WeatherState get state => (super.noSuchMethod(
        Invocation.getter(#state),
        returnValue: _FakeWeatherState_3(
          this,
          Invocation.getter(#state),
        ),
        returnValueForMissingStub: _FakeWeatherState_3(
          this,
          Invocation.getter(#state),
        ),
      ) as _i5.WeatherState);

  @override
  _i7.Stream<_i5.WeatherState> get stream => (super.noSuchMethod(
        Invocation.getter(#stream),
        returnValue: _i7.Stream<_i5.WeatherState>.empty(),
        returnValueForMissingStub: _i7.Stream<_i5.WeatherState>.empty(),
      ) as _i7.Stream<_i5.WeatherState>);

  @override
  bool get isClosed => (super.noSuchMethod(
        Invocation.getter(#isClosed),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);

  @override
  String get id => (super.noSuchMethod(
        Invocation.getter(#id),
        returnValue: _i8.dummyValue<String>(
          this,
          Invocation.getter(#id),
        ),
        returnValueForMissingStub: _i8.dummyValue<String>(
          this,
          Invocation.getter(#id),
        ),
      ) as String);

  @override
  String get storagePrefix => (super.noSuchMethod(
        Invocation.getter(#storagePrefix),
        returnValue: _i8.dummyValue<String>(
          this,
          Invocation.getter(#storagePrefix),
        ),
        returnValueForMissingStub: _i8.dummyValue<String>(
          this,
          Invocation.getter(#storagePrefix),
        ),
      ) as String);

  @override
  String get storageToken => (super.noSuchMethod(
        Invocation.getter(#storageToken),
        returnValue: _i8.dummyValue<String>(
          this,
          Invocation.getter(#storageToken),
        ),
        returnValueForMissingStub: _i8.dummyValue<String>(
          this,
          Invocation.getter(#storageToken),
        ),
      ) as String);

  @override
  _i5.WeatherState? fromJson(Map<String, dynamic>? json) => (super.noSuchMethod(
        Invocation.method(
          #fromJson,
          [json],
        ),
        returnValueForMissingStub: null,
      ) as _i5.WeatherState?);

  @override
  Map<String, dynamic>? toJson(_i5.WeatherState? state) => (super.noSuchMethod(
        Invocation.method(
          #toJson,
          [state],
        ),
        returnValueForMissingStub: null,
      ) as Map<String, dynamic>?);

  @override
  void add(_i5.WeatherEvent? event) => super.noSuchMethod(
        Invocation.method(
          #add,
          [event],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void onEvent(_i5.WeatherEvent? event) => super.noSuchMethod(
        Invocation.method(
          #onEvent,
          [event],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void emit(_i5.WeatherState? state) => super.noSuchMethod(
        Invocation.method(
          #emit,
          [state],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void on<E extends _i5.WeatherEvent>(
    _i9.EventHandler<E, _i5.WeatherState>? handler, {
    _i9.EventTransformer<E>? transformer,
  }) =>
      super.noSuchMethod(
        Invocation.method(
          #on,
          [handler],
          {#transformer: transformer},
        ),
        returnValueForMissingStub: null,
      );

  @override
  void onTransition(
          _i9.Transition<_i5.WeatherEvent, _i5.WeatherState>? transition) =>
      super.noSuchMethod(
        Invocation.method(
          #onTransition,
          [transition],
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i7.Future<void> close() => (super.noSuchMethod(
        Invocation.method(
          #close,
          [],
        ),
        returnValue: _i7.Future<void>.value(),
        returnValueForMissingStub: _i7.Future<void>.value(),
      ) as _i7.Future<void>);

  @override
  void onChange(_i9.Change<_i5.WeatherState>? change) => super.noSuchMethod(
        Invocation.method(
          #onChange,
          [change],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void addError(
    Object? error, [
    StackTrace? stackTrace,
  ]) =>
      super.noSuchMethod(
        Invocation.method(
          #addError,
          [
            error,
            stackTrace,
          ],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void onError(
    Object? error,
    StackTrace? stackTrace,
  ) =>
      super.noSuchMethod(
        Invocation.method(
          #onError,
          [
            error,
            stackTrace,
          ],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void hydrate() => super.noSuchMethod(
        Invocation.method(
          #hydrate,
          [],
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i7.Future<void> clear() => (super.noSuchMethod(
        Invocation.method(
          #clear,
          [],
        ),
        returnValue: _i7.Future<void>.value(),
        returnValueForMissingStub: _i7.Future<void>.value(),
      ) as _i7.Future<void>);
}

/// A class which mocks [LocationService].
///
/// See the documentation for Mockito's code generation for more information.
class MockLocationService extends _i1.Mock implements _i3.LocationService {
  @override
  _i7.Future<_i6.Position> getCurrentPosition() => (super.noSuchMethod(
        Invocation.method(
          #getCurrentPosition,
          [],
        ),
        returnValue: _i7.Future<_i6.Position>.value(_FakePosition_4(
          this,
          Invocation.method(
            #getCurrentPosition,
            [],
          ),
        )),
        returnValueForMissingStub:
            _i7.Future<_i6.Position>.value(_FakePosition_4(
          this,
          Invocation.method(
            #getCurrentPosition,
            [],
          ),
        )),
      ) as _i7.Future<_i6.Position>);
}

/// A class which mocks [PermissionService].
///
/// See the documentation for Mockito's code generation for more information.
class MockPermissionService extends _i1.Mock implements _i4.PermissionService {
  @override
  _i7.Future<bool> locationPermission() => (super.noSuchMethod(
        Invocation.method(
          #locationPermission,
          [],
        ),
        returnValue: _i7.Future<bool>.value(false),
        returnValueForMissingStub: _i7.Future<bool>.value(false),
      ) as _i7.Future<bool>);
}
